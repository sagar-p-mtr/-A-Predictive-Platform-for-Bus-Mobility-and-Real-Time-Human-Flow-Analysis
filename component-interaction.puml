@startuml Component Interaction Diagram - Where Is My Bus
!theme blueprint
title Component Interaction Diagram - Where Is My Bus Application

' Define component styles
skinparam component {
  BackgroundColor #F8F9FA
  BorderColor #6C757D
  FontSize 12
}

skinparam interface {
  BackgroundColor #E9ECEF
  BorderColor #495057
}

' Main Application Container
package "Application Shell" {
  component [App.tsx] as App
  component [ThemeProvider] as ThemeProvider
  component [ErrorBoundary] as ErrorBoundary
}

' Core UI Components
package "Core UI Components" {
  component [Header] as Header
  component [HeroSection] as HeroSection
  component [SearchSection] as SearchSection
  component [LiveTrackingSection] as LiveTracking
  component [BusRouteMap] as BusRouteMap
  component [BottomNavigation] as BottomNav
  component [Footer] as Footer
}

' Advanced Feature Components
package "Advanced Features" {
  component [AIAssistant] as AIAssistant
  component [ARNavigation] as ARNavigation
  component [Bus3DVisualization] as Bus3D
  component [SocialFeatures] as SocialFeatures
  component [VoiceControl] as VoiceControl
}

' Service Layer
package "Services" {
  component [API Service] as APIService
  component [Real-time Service] as RealtimeService
  component [Auth Service] as AuthService
  component [Voice Service] as VoiceService
  component [Offline Storage] as OfflineStorage
}

' Context & State Management
package "State Management" {
  component [ThemeContext] as ThemeContext
  component [Zustand Store] as ZustandStore
  component [React Hooks] as ReactHooks
}

' Custom Hooks
package "Custom Hooks" {
  component [useRealtimeUpdates] as UseRealtime
  component [useOfflineData] as UseOffline
  component [useErrorHandler] as UseError
  component [useSearchHistory] as UseSearch
}

' External APIs
package "External APIs" {
  component [BMTC API] as BMTCAPI
  component [KSRTC API] as KSRTCAPI
  component [WebSocket Server] as WSServer
  component [OpenAI API] as OpenAIAPI
}

' Interfaces
interface "Bus Data" as IBusData
interface "Route Data" as IRouteData
interface "Real-time Updates" as IRealtime
interface "User Events" as IUserEvents
interface "Theme State" as IThemeState
interface "Search Query" as ISearchQuery

' Main App Flow
App --> ThemeProvider : "Wraps application"
App --> ErrorBoundary : "Error handling"
App --> Header : "Navigation & user actions"
App --> HeroSection : "Landing page"
App --> SearchSection : "Bus search functionality"
App --> LiveTracking : "Main tracking interface"
App --> BottomNav : "Mobile navigation"
App --> Footer : "App information"

' Advanced Features Integration
App --> AIAssistant : "AI chat interface"
App --> ARNavigation : "AR camera overlay"
App --> Bus3D : "3D bus visualization"
App --> SocialFeatures : "Community features"
App --> VoiceControl : "Voice commands"

' Service Layer Connections
LiveTracking --> APIService : "Fetch bus data"
LiveTracking --> RealtimeService : "Subscribe to updates"
BusRouteMap --> APIService : "Route information"
BusRouteMap --> RealtimeService : "Live bus positions"

AIAssistant --> OpenAIAPI : "Natural language processing"
VoiceControl --> VoiceService : "Speech recognition"
App --> AuthService : "User authentication"

' State Management Flow
ThemeProvider --> ThemeContext : "Theme state"
App --> ZustandStore : "Global state"
LiveTracking --> ReactHooks : "Component state"

' Custom Hooks Integration
LiveTracking --> UseRealtime : "Real-time data"
BusRouteMap --> UseRealtime : "Live updates"
App --> UseOffline : "Offline capabilities"
App --> UseError : "Error handling"
SearchSection --> UseSearch : "Search history"

' External API Connections
APIService --> BMTCAPI : "BMTC bus data"
APIService --> KSRTCAPI : "KSRTC bus data"
RealtimeService --> WSServer : "WebSocket connection"
AIAssistant --> OpenAIAPI : "AI responses"

' Data Flow Interfaces
APIService --> IBusData : "Provides"
APIService --> IRouteData : "Provides"
RealtimeService --> IRealtime : "Provides"
SearchSection --> ISearchQuery : "Emits"
Header --> IUserEvents : "Emits"
ThemeContext --> IThemeState : "Provides"

LiveTracking --> IBusData : "Consumes"
LiveTracking --> IRouteData : "Consumes"
BusRouteMap --> IRealtime : "Consumes"
App --> IUserEvents : "Handles"
App --> IThemeState : "Consumes"
APIService --> ISearchQuery : "Consumes"

' Offline Storage Integration
UseOffline --> OfflineStorage : "Cache management"
APIService --> OfflineStorage : "Data persistence"

' Notes for key components
note right of LiveTracking
  Main tracking interface:
  - Route selection
  - Bus filtering
  - Real-time updates
  - Map integration
end note

note right of RealtimeService
  Real-time capabilities:
  - WebSocket connection
  - Auto-reconnection
  - Event broadcasting
  - Connection state management
end note

note right of AIAssistant
  AI-powered features:
  - Natural language queries
  - Route recommendations
  - Fare calculations
  - Context-aware responses
end note

note right of BusRouteMap
  Interactive map:
  - Leaflet integration
  - Real-time bus positions
  - Route visualization
  - Stop information
end note

note bottom of APIService
  Multi-provider API:
  - BMTC, KSRTC, APSRTC
  - Fallback to mock data
  - Error handling
  - Data normalization
end note

@enduml
